// Generated by CoffeeScript 1.3.3
var Comment_Schema, Controller, Controller_Assisstant, News_Schema, Shop_Schema, Userinfo_Schema;

Shop_Schema = require('./model/shop_schema');

Userinfo_Schema = require('./model/userinfo_schema');

News_Schema = require('./model/news_schema');

Comment_Schema = require('./model/comment_schema');

Controller_Assisstant = require('./controller_assisstant');

Controller = (function() {

  function Controller() {
    this.routes = [
      {
        path: "/",
        http_method: "get",
        method: "index"
      }, {
        path: "/index",
        http_method: "get",
        method: "index"
      }, {
        path: "/shops",
        http_method: "get",
        method: "get_shops"
      }, {
        path: "/shop/:id",
        http_method: "get",
        method: "get_shop_info"
      }, {
        path: "/shop/:id",
        http_method: "delete",
        method: "delete_shop"
      }, {
        path: "/visit/:id",
        http_method: "put",
        method: "update_visit_num"
      }, {
        path: "/shop",
        http_method: "post",
        method: "insert_shop"
      }, {
        path: "/validate_field",
        http_method: "get",
        method: "validate_field"
      }, {
        path: "/goodbad/:id",
        http_method: "put",
        method: "update_goodbad_value"
      }, {
        path: "/register",
        http_method: "post",
        method: "register_user"
      }, {
        path: "/login/:id",
        http_method: "get",
        method: "login_user"
      }, {
        path: "/logout/:id",
        http_method: "get",
        method: "logout_user"
      }, {
        path: "/comment/:id",
        http_method: "post",
        method: "insert_comment"
      }, {
        path: "/comments/:id",
        http_method: "get",
        method: "get_comments"
      }, {
        path: "/comments/:id",
        http_method: "delete",
        method: "delete_comments"
      }, {
        path: "/comment/:id",
        http_method: "delete",
        method: "delete_comment"
      }, {
        path: "/news/:id",
        http_method: "get",
        method: "get_news"
      }, {
        path: "/news/:id",
        http_method: "delete",
        method: "delete_news"
      }, {
        path: "/dining",
        http_method: "get",
        method: "dining_index"
      }
    ];
    this.ss = new Shop_Schema();
    this.us = {};
    this.ns = new News_Schema();
    this.cs = new Comment_Schema();
    this.ca = new Controller_Assisstant(this.ss, this.us);
    return;
  }

  Controller.prototype.index = function(req, res) {
    return res.render('index.ejs');
  };

  Controller.prototype.get_shops = function(req, res) {
    var category, fields, limit, start;
    category = req.param("category");
    start = (req.param("start")) || 0;
    limit = (req.param("limit")) || 0;
    fields = req.param("fields");
    if (this.ca.validate_category(category)) {
      return this.ss.get_shops(category, fields, start, limit, function(err, docs) {
        if (!(err != null)) {
          if ((docs != null ? docs.length : void 0) > 0) {
            return res.json(docs);
          } else {
            return res.json(docs);
          }
        } else {
          return res.json(400, {
            "error": err
          });
        }
      });
    } else {
      return res.json(400, {
        "error": "Invalid category"
      });
    }
  };

  Controller.prototype.get_shop_info = function(req, res) {
    return res.json({
      "_id": req.params.id
    });
  };

  Controller.prototype.send_shop_info = function(res, fieldinfo, id, type, news_t, comm_t, start, limit) {
    var comments, news,
      _this = this;
    news = "";
    comments = "";
    if (news_t === 0 && comm_t === 0) {
      res.json({
        "news": news,
        "comments": comments,
        "fields": fieldinfo
      });
      return;
    }
    if (comm_t !== 0) {
      return this.cs.get_comments(id, type, start, limit, -1, function(err, docs) {
        if (!(err != null)) {
          comments = docs;
          if (news_t !== 0) {
            return _this.ns.get_news_by_id(id, type, start, limit, function(err, docs) {
              if (!(err != null)) {
                news = docs;
                return res.json({
                  "news": news,
                  "comments": comments,
                  "fields": fieldinfo
                });
              } else {
                return res.json({
                  "news": news,
                  "comments": comments,
                  "fields": fieldinfo
                });
              }
            });
          } else {
            return res.json({
              "news": news,
              "comments": comments,
              "fields": fieldinfo
            });
          }
        } else {
          if (news_t !== 0) {
            return _this.ns.get_news_by_id(id, type, start, limit, function(err, docs) {
              if (!(err != null)) {
                news = docs;
                return res.json({
                  "news": news,
                  "comments": comments,
                  "fields": fieldinfo
                });
              } else {
                return res.json({
                  "news": news,
                  "comments": comments,
                  "fields": fieldinfo
                });
              }
            });
          } else {
            return res.json({
              "news": news,
              "comments": comments,
              "fields": fieldinfo
            });
          }
        }
      });
    } else {
      return this.ns.get_news_by_id(id, type, start, limit, function(err, docs) {
        if (!(err != null)) {
          news = docs;
          return res.json({
            "news": news,
            "comments": comments,
            "fields": fieldinfo
          });
        } else {
          return res.json({
            "news": news,
            "comments": comments,
            "fields": fieldinfo
          });
        }
      });
    }
  };

  Controller.prototype.update_visit_num = function(req, res) {
    var id, visit;
    id = req.params.id;
    visit = this.ss.update_visit(id);
    if (visit !== -1) {
      return res.json({
        "visit": visit
      });
    } else {
      return res.json(400, {
        "error": "failed to update visit number"
      });
    }
  };

  Controller.prototype.insert_shop = function(req, res) {
    var shopinfo;
    shopinfo = req.body;
    if (this.ca.validate_shop(shopinfo)) {
      if (this.ss.insert_shop(shopinfo)) {
        return res.json({
          "insert": "success"
        });
      } else {
        return res.json(400, {
          "insert": "failed"
        });
      }
    } else {
      return res.json({
        "error": "Invalid shop information"
      });
    }
  };

  Controller.prototype.delete_shop = function(req, res) {
    var id;
    id = req.params.id;
    if (this.ss.remove_shop_by_id(id)) {
      return res.json({
        "info": "success"
      });
    } else {
      return res.json({
        "info": "failed"
      });
    }
  };

  Controller.prototype.validate_field = function(req, res) {
    var field, result, table, value;
    table = req.param(table);
    field = req.param(field);
    value = req.param(value);
    if ((table != null) && (field != null) && (value != null)) {
      result = this.ca.validate_field(table, field, value);
      return res.json(result);
    } else {
      return res.json(400, {
        "error": "bad request"
      });
    }
  };

  Controller.prototype.update_goodbad_value = function(req, res) {
    var category, id, num, type;
    id = req.params.id;
    category = req.param(category);
    type = req.params.type;
    if (this.ca.validate_category(category)) {
      num = this.ss.update_badgood(id, type);
      if (num === -1) {
        return res.json(400, {
          "error": "failed to update"
        });
      } else {
        return res.json({
          "value": "value",
          num: num
        });
      }
    } else {
      return res.json(400, {
        "error": "Invalid category"
      });
    }
  };

  Controller.prototype.register_user = function(req, res) {
    var userinfo;
    userinfo = req.body;
    if (this.ca.validate_username(userinfo.username)) {
      if (this.us.insert_user(userinfo === true)) {
        return res.json({
          "info": "ok"
        });
      } else {
        return res.json(400, {
          "error": "failed to register"
        });
      }
    } else {
      return res.json(400, {
        "error": "This name is already exist"
      });
    }
  };

  Controller.prototype.login_user = function(req, res) {};

  Controller.prototype.logout_user = function(req, res) {};

  Controller.prototype.insert_comment = function(req, res) {
    var category, comment, id, vca, vco;
    id = req.params.id;
    category = req.param(category);
    comment = req.body;
    vca = this.ca.validate_category(category);
    vco = this.ca.validate_comment(comment);
    if (vca && vco) {
      return this.cs.insert_comment(comment, category, function(err) {
        if (!(err != null)) {
          return res.json({
            insert: "success"
          });
        } else {
          return res.json(400, {
            insert: "failed"
          });
        }
      });
    } else {
      return res.json(400, {
        "error": "Please try again"
      });
    }
  };

  Controller.prototype.get_comments = function(req, res) {
    var category, id, level, limit, start;
    id = req.params.id;
    category = req.param(category);
    start = req.param(start);
    limit = req.param(limit);
    level = (req.param(level)) || -1;
    return this.cs.get_comments(id, type, start, limit, level, function(err, docs) {
      if (err != null) {
        return res.json(404, {
          "error": "did not find any comment"
        });
      } else {
        return res.json(docs);
      }
    });
  };

  Controller.prototype.get_news = function(req, res) {
    var category, id, limit, start;
    id = req.params.id;
    category = req.param(category);
    start = req.param(start);
    limit = req.param(limit);
    return this.ns.get_news_by_id(id, type, start, limit, function(err, docs) {
      if (err != null) {
        return res.json(404, {
          "error": "did not find any news"
        });
      } else {
        return res.json(docs);
      }
    });
  };

  Controller.prototype.delete_comments = function(req, res) {};

  Controller.prototype.delete_comment = function(req, res) {};

  Controller.prototype.delete_news = function(req, res) {};

  Controller.prototype.dining_index = function(req, res) {
    return res.render("dining.ejs");
  };

  return Controller;

})();

module.exports = Controller;
