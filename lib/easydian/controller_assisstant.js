// Generated by CoffeeScript 1.3.3
var Controller_Assisstant,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Controller_Assisstant = (function() {

  function Controller_Assisstant(ss, us) {
    this.ss = ss;
    this.us = us;
  }

  Controller_Assisstant.prototype.validate_category = function(category) {
    if (__indexOf.call(ShopCategory, category) >= 0) {
      return true;
    }
    return false;
  };

  Controller_Assisstant.prototype.validate_username = function(name) {
    return this.us.get_user_by_name(name, "username", function(doc) {
      if (!(doc != null)) {
        return true;
      }
      return false;
    });
  };

  Controller_Assisstant.prototype.validate_shopname = function(name) {
    return this.ss.get_shop_by_name(name, "shopname", function(doc) {
      if (!(doc != null)) {
        return true;
      }
      return false;
    });
  };

  Controller_Assisstant.prototype.validate_comment = function(comment) {
    if ((comment.shopid != null) && (comment.comment != null)) {
      return true;
    }
    return false;
  };

  Controller_Assisstant.prototype.validate_shop = function(shop) {
    if ((shop.shopname != null) && (shop.shoptype != null) && (shop.shoplogo != null)) {
      if (this.validate_username(shop.shopname)) {
        return true;
      } else {
        return false;
      }
    }
    return false;
  };

  Controller_Assisstant.prototype.validate_field = function(table, field, value) {
    switch (table) {
      case "shop":
        switch (field) {
          case "shopname":
            if (!(this.validate_shopname(value))) {
              return {
                validation: "failed",
                "description": "This name is already exist"
              };
            } else {
              return {
                validation: "success",
                "description": "Cong! This name is valid"
              };
            }
            break;
          case "shoptype":
            if (!(this.validate_category(value))) {
              return {
                validation: "failed",
                "description": "It is invalid shop type"
              };
            } else {
              return {
                validation: "success",
                "description": "Cong! This type is valid"
              };
            }
            break;
          case "shoplogo":
          case "shopcover":
            if (!(value != null)) {
              return {
                validation: "failed",
                "description": "It must not be empty"
              };
            } else {
              return {
                validation: "success",
                "description": "Cong! It is ok"
              };
            }
            break;
          default:
            return {
              validation: "failed",
              "description": "We can not verify this Field"
            };
        }
        break;
      case "user":
        switch (field) {
          case "username":
            if (!this.validate_username(value)) {
              return {
                validation: "failed",
                "description": "This name is already exist"
              };
            } else {
              return {
                validation: "success",
                "description": "Cong! This name is valid"
              };
            }
            break;
          default:
            return {
              validation: "failed",
              "description": "We can not verify this Field"
            };
        }
        break;
      default:
        return {
          validation: "failed",
          "description": "We can not verify this Table"
        };
    }
  };

  return Controller_Assisstant;

})();

module.exports = Controller_Assisstant;
