// Generated by CoffeeScript 1.3.3
var Sys_Schema;

Sys_Schema = (function() {

  function Sys_Schema() {
    this.sys_schema = new Schema({
      shoptype: {
        type: String,
        "default": "default type"
      },
      shopnum: {
        type: Number,
        "default": 10
      },
      column: {
        type: Number,
        "default": 4
      },
      taborder: {
        type: Number,
        "default": 1
      },
      createtime: {
        type: Date,
        "default": Date.now
      }
    });
    this.sys_model = Mongoose.model("sys_manager", this.sys_schema);
    return;
  }

  Sys_Schema.prototype.insert_shop_type = function(sys, callback) {
    var sys_doc;
    sys_doc = new this.sys_model(sys);
    if (!(callback != null)) {
      return sys_doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to create_sys_manager: " + err);
        }
      });
    } else {
      return sys_doc.save(callback);
    }
  };

  Sys_Schema.prototype.get_shop_type = function(fields, callback) {
    return this.sys_model.find().select(fields).sort('taborder').exec(callback);
  };

  Sys_Schema.prototype.increase_shopnum = function(num, type) {
    var condition, option, update;
    condition = {
      shoptype: type
    };
    update = {
      $inc: {
        shopnum: num
      }
    };
    option = {
      upsert: false
    };
    return this.sys_model.update(condition, update, option, function(err) {
      if (err != null) {
        return logger.info("failed to update_shopnum: " + err);
      }
    });
  };

  Sys_Schema.prototype.update_column = function(num, type) {
    var condition, option, update;
    condition = {
      shoptype: type
    };
    update = {
      $set: {
        column: num
      }
    };
    option = {
      upsert: false
    };
    return this.sys_model.update(condition, update, option, function(err) {
      if (err != null) {
        return logger.info("failed to update_column: " + err);
      }
    });
  };

  Sys_Schema.prototype.update_taborder = function(order, type) {
    var condition, option, update;
    condition = {
      shoptype: type
    };
    update = {
      $set: {
        taborder: order
      }
    };
    option = {
      upsert: false
    };
    return this.sys_model.update(condition, update, option, function(err) {
      if (err != null) {
        return logger.info("failed to update_taborder: " + err);
      }
    });
  };

  Sys_Schema.prototype.remove_shop_type = function(type) {
    return this.shop_model.remove({
      shoptype: type
    }, function(err) {
      if (err != null) {
        return logger.info("failed to remove_shop_type: " + err);
      }
    });
  };

  return Sys_Schema;

})();

module.exports = Sys_Schema;
