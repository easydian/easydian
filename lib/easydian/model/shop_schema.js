// Generated by CoffeeScript 1.3.3
/*
  put all the shops into one collection, which is called 'shops'
  e.g:
  @shop_model = Mongoose.model('shops',@shop_schema)
  name->index, id->index
  shopweekstats prototype
  shopweekstats:[
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
*/

var Shop_Schema;

Shop_Schema = (function() {

  function Shop_Schema() {
    this.shop_schema = new Schema({
      shopname: {
        type: String,
        "default": 'fullname'
      },
      shopalias: {
        type: Array,
        "default": ['short name']
      },
      shoptype: {
        type: String,
        "default": 'Dining'
      },
      shopvisit: {
        type: Number,
        "default": 1000
      },
      shoppriority: {
        type: Number,
        "default": 1000
      },
      shopwebsite: {
        type: String,
        "default": 'fullurl'
      },
      shopphone: {
        type: Array,
        "default": ['010-22222222']
      },
      shoponbusiness: {
        type: Boolean,
        "default": true
      },
      shoponadv: {
        type: Boolean,
        "default": true
      },
      shopweekstats: [],
      weekday: {
        type: Array,
        "default": [0, 0, 0, 0, 0, 0, 0]
      },
      weekdaygood: {
        type: Array,
        "default": [0, 0, 0, 0, 0, 0, 0]
      },
      weekdaybad: {
        type: Array,
        "default": [0, 0, 0, 0, 0, 0, 0]
      },
      shopgoodt: {
        type: Number,
        "default": 0
      },
      shopbadt: {
        type: Number,
        "default": 0
      },
      shopdaystats: {
        type: Array,
        "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      },
      shopmonthstats: {
        type: Array,
        "default": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      },
      shoplogo: {
        type: String,
        "default": './images/default.jpg'
      },
      shopcover: {
        type: Array,
        "default": ['beijing', 'shanghai']
      },
      shopaccount: {
        type: Number,
        "default": 0
      },
      shopcreatetime: {
        type: Date,
        "default": Date.now
      },
      shopcommentsnum: {
        type: Number,
        "default": 0
      }
    });
    this.shop_model = Mongoose.model("shops", this.shop_schema);
    return;
  }

  Shop_Schema.prototype.insert_shop = function(shop, callback) {
    var shop_doc;
    shop_doc = new this.shop_model(shop);
    if (!(callback != null)) {
      return shop_doc.save(function(err) {
        if (err != null) {
          logger.info("failed to insert_shop: " + err);
          return false;
        }
        return true;
      });
    } else {
      return shop_doc.save(callback);
    }
  };

  Shop_Schema.prototype.get_shops = function(category, fields, start, limit, callback) {
    if (typeof category === 'function') {
      return this.shop_model.find().sort('-shoppriority').select(fields).exec(callback);
    } else {
      return this.shop_model.find({
        shoptype: category
      }).sort('-shoppriority').skip(start).limit(limit).select(fields).exec(callback);
    }
  };

  Shop_Schema.prototype.update_visit = function(id) {
    var fields;
    fields = "shopvisit shopweekstats weekday shopdaystats shoppriority shopmonthstats";
    return this.shop_model.findById(id, fields, function(err, doc) {
      var curtime, day, hour, month;
      if (err != null) {
        logger.info("update_visit.findbyIDd: " + err);
        return -1;
      }
      curtime = new Date();
      day = curtime.getDay() - 1;
      hour = curtime.getHours() - 1;
      month = curtime.getMonth();
      doc.shopvisit = doc.shopvisit + 1;
      doc.shopweekstats[day][hour] = doc.shopweekstats[day][hour] + 1;
      doc.weekday[day] = doc.weekday[day] + 1;
      doc.shopdaystats[hour] = doc.shopdaystats[hour] + 1;
      doc.shoppriority = doc.shoppriority + 1;
      doc.shopmonthstats[month] = doc.shopmonthstats[month] + 1;
      doc.markModified("shopweekstats");
      doc.markModified("weekday");
      doc.markModified("shopdaystats");
      doc.markModified("shopmonthstats");
      return doc.save(function(err) {
        if (err != null) {
          logger.info("failed to update_visit.save: " + err);
          return -1;
        }
        return doc.shopvisit;
      });
    });
  };

  Shop_Schema.prototype.update_badgood = function(id, type) {
    var fields, num;
    fields = "weekdaygood shoppriority shopgoodt shopbadt weekdaybad";
    num = 0;
    return this.shop_model.findById(id, fields, function(err, doc) {
      var curtime, day, hour, month;
      if (err != null) {
        logger.info("update_badgood.findbyID: " + err);
      }
      curtime = new Date();
      day = curtime.getDay() - 1;
      hour = curtime.getHours() - 1;
      month = curtime.getMonth();
      if (type === 'good') {
        doc.weekdaygood[day] = doc.weekdaygood[day] + 1;
        doc.shoppriority = doc.shoppriority + 2;
        doc.shopgoodt = doc.shopgoodt + 1;
        doc.markModified("weekdaygood");
        num = doc.shopgoodt;
      } else {
        doc.weekdaybad[day] = doc.weekdaybad[day] + 1;
        doc.shoppriority = doc.shoppriority - 2;
        doc.shopbadt = doc.shopbadt + 1;
        doc.markModified("weekdaybad");
        num = doc.shopbadt;
      }
      return doc.save(function(err) {
        if (err != null) {
          logger.info("failed to update_badgood.save: " + err);
          return -1;
        }
        return num;
      });
    });
  };

  Shop_Schema.prototype.get_shop_by_id = function(id, fields, callback) {
    return this.shop_model.findById(id, fields, callback);
  };

  Shop_Schema.prototype.get_shop_by_name = function(name, fields, callback) {
    return this.shop_model.find({
      shopname: name
    }, fields, function(err, doc) {
      if (err != null) {
        logger.info("failed to get_shop_by_name.find: " + err);
        return false;
      }
      return callback(doc);
    });
  };

  Shop_Schema.prototype.update_shop_account = function(id, num) {
    return this.shop_model.update({
      _id: id
    }, {
      "shopaccount": num
    }, {
      upsert: false
    }, function(err, num, doc) {
      if (err != null) {
        return logger.info("failed to update_shop_account: " + err);
      }
    });
  };

  /* 
  update_field_by_id: (id, field, newvalue) ->
    @shop_model.update {_id:id},{field:newvalue}, {upsert: false}, (err,num,doc) ->
      logger.info "failed to update_field_by_id: "+err if err?
  */


  Shop_Schema.prototype.update_shop_logo = function(id, logo) {
    return this.shop_model.update({
      _id: id
    }, {
      "shoplogo": logo
    }, {
      upsert: false
    }, function(err, num, doc) {
      if (err != null) {
        logger.info("failed to update_shop_logo: " + err);
        false;
      }
      return true;
    });
  };

  Shop_Schema.prototype.update_comments_num = function(id) {
    var fields;
    fields = "shopcommentsnum";
    return this.shop_model.findById(id, fields, function(err, doc) {
      if (err != null) {
        logger.info("failed to update_comments_num.findById: " + err);
        return false;
      } else {
        doc.shopcommentsnum = doc.shopcommentsnum + 1;
        return doc.save(function(err) {
          if (err != null) {
            logger.info("failed to update_comments_num.save: " + err);
            false;
          }
          return true;
        });
      }
    });
  };

  Shop_Schema.prototype.remove_shop_by_id = function(id) {
    return this.shop_model.remove({
      _id: id
    }, function(err) {
      if (err != null) {
        logger.info("failed to remove_shop_by_id: " + err);
        false;
      }
      return true;
    });
  };

  return Shop_Schema;

})();

module.exports = Shop_Schema;
