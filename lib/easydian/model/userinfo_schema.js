// Generated by CoffeeScript 1.3.3
var Userinfo_Schema;

Userinfo_Schema = (function() {

  function Userinfo_Schema() {
    this.addr_info = new Schema({
      address: {
        type: String,
        required: true,
        unique: true
      },
      gps: {
        x: 0.00,
        y: 0.00
      },
      usetime: {
        type: Date,
        "default": Date.now
      }
    });
    this.phone_info = new Schema({
      phone: {
        type: String,
        unique: true
      },
      usetime: {
        type: Date,
        "default": Date.now
      }
    });
    this.user_schema = new Schema({
      username: {
        type: String,
        required: true
      },
      useralias: {
        type: String,
        "default": "Mr Lazy"
      },
      useraddress: [this.addr_info],
      userpassword: {
        type: String,
        "default": "md5"
      },
      usertargetaddress: [this.addr_info],
      userphone: [this.phone_info],
      logintime: [
        {
          login: Date,
          logduration: Number
        }
      ],
      belogin: {
        type: Boolean,
        "default": true
      }
    });
    this.user_model = Mongoose.model('user_info', this.user_schema);
    return;
  }

  Userinfo_Schema.prototype.insert_user = function(user, callback) {
    var user_doc;
    user_doc = new this.user_model(user);
    if (!(callback != null)) {
      return user_doc.save(function(err) {
        if (err != null) {
          logger.info("failed to insert_shop: " + err);
          return false;
        }
        return true;
      });
    } else {
      return user_doc.save(callback);
    }
  };

  Userinfo_Schema.prototype.get_user = function(id, fields, callback) {
    return this.user_model.findById(id, fields, function(err, doc) {
      if (err != null) {
        logger.info("failed to get_user: " + err);
        return false;
      }
      true;
      return callback(doc);
    });
  };

  Userinfo_Schema.prototype.get_user_by_name = function(name, fields, callback) {
    return this.user_model.find({
      username: name
    }, fields, function(err, doc) {
      if (err != null) {
        logger.info("failed to get_user_by_name: " + err);
        return false;
      }
      true;
      return callback(doc);
    });
  };

  Userinfo_Schema.prototype.add_address_to_user = function(id, addrinfo) {
    return this.user_model.findById(id, "useraddress", function(err, doc) {
      doc.useraddress.push(addrinfo);
      doc.markModified("useraddress");
      return doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to add_address_to_user: " + err);
        }
      });
    });
  };

  Userinfo_Schema.prototype.add_address_to_target = function(id, addrinfo) {
    return this.user_model.findById(id, "usertargetaddress", function(err, doc) {
      doc.usertargetaddress.push(addrinfo);
      doc.markModified("usertargetaddress");
      return doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to add_address_to_target: " + err);
        }
      });
    });
  };

  Userinfo_Schema.prototype.remove_user_address = function(id, address) {
    var condition, update;
    condition = {
      _id: id
    };
    update = {
      $pull: {
        useraddress: {
          address: address
        }
      }
    };
    return this.user_model.update(condition, update, false, false);
  };

  Userinfo_Schema.prototype.remove_target_address = function(id, address) {
    var condition, update;
    condition = {
      _id: id
    };
    update = {
      $pull: {
        usertargetaddress: {
          address: address
        }
      }
    };
    return this.user_model.update(condition, update, false, false);
  };

  Userinfo_Schema.prototype.add_phone_to_user = function(id, phoneinfo) {
    return this.user_model.findById(id, "userphone", function(err, doc) {
      doc.userphone.push(phoneinfo);
      doc.markModified("userphone");
      return doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to add_phone_to_user: " + err);
        }
      });
    });
  };

  Userinfo_Schema.prototype.remove_user_phone = function(id, phonenum) {
    var condition, update;
    condition = {
      _id: id
    };
    update = {
      $pull: {
        userphone: {
          phone: phonenum
        }
      }
    };
    return this.user_model.update(condition, update, false, false);
  };

  Userinfo_Schema.prototype.remove_user = function(id) {
    return this.user_model.remove({
      _id: id
    }, function(err) {
      if (err != null) {
        return logger.info("failed to remove_user: " + err);
      }
    });
  };

  Userinfo_Schema.prototype.update_logintime = function(id, inflag) {
    return this.user_model.findById(id, "logintime", function(err, doc) {
      var logintime, logoutime;
      if (inflag === true) {
        doc.logintime.push({
          login: Date.now,
          logduration: 0
        });
      } else {
        logintime = doc.logintime[0].login;
        logoutime = Date.now;
        doc.logintime[0].logduration = logoutime - logintime;
      }
      doc.markModified("logintime");
      return doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to update_logintime: " + err);
        }
      });
    });
  };

  Userinfo_Schema.prototype.update_login_status = function(id, status) {
    var condition, option, update;
    condition = {
      _id: id
    };
    update = {
      $set: {
        belogin: status
      }
    };
    option = {
      upsert: false
    };
    return this.user_model.update(condition, update, option, function(err) {
      if (err != null) {
        return logger.info("failed to update_login_status: " + err);
      }
    });
  };

  Userinfo_Schema.prototype.update_user_alias = function(id, alias) {
    var condition, option, update;
    condition = {
      _id: id
    };
    update = {
      $set: {
        useralias: alias
      }
    };
    option = {
      upsert: false
    };
    return this.user_model.update(condition, update, option, function(err) {
      if (err != null) {
        return logger.info("failed to update_user_alias: " + err);
      }
    });
  };

  return Userinfo_Schema;

})();

module.exports = Userinfo_Schema;
