// Generated by CoffeeScript 1.3.3
var Comment_Schema;

Comment_Schema = (function() {

  function Comment_Schema() {
    this.comm_schema = new Schema({
      shopid: {
        type: String,
        "default": 'shopid'
      },
      level: {
        type: Number,
        "default": 4
      },
      comment: {
        type: String,
        "default": 'context'
      },
      createtime: {
        type: Date,
        "default": Date.now
      }
    });
  }

  Comment_Schema.prototype.insert_comment = function(comment, category, callback) {
    var comm_model, comment_doc;
    comm_model = Mongoose.model("comments", this.comm_schema, category);
    comment_doc = new comm_model(comment);
    if (!(callback != null)) {
      return comment_doc.save(function(err) {
        if (err != null) {
          return logger.info("failed to insert_comment: " + err);
        }
      });
    } else {
      return comment_doc.save(callback);
    }
  };

  Comment_Schema.prototype.get_comments = function(shopid, category, start, limit, level, callback) {
    var cur_model;
    cur_model = Mongoose.model("comments", this.comm_schema, category);
    if (level === -1) {
      return cur_model.find({
        shopid: shopid
      }).sort('-createtime').skip(start).limit(limit).select("comment").exec(callback);
    } else {
      return cur_model.find({
        shopid: shopid,
        level: level
      }).sort('-createtime').skip(start).limit(limit).select("comment").exec(callback);
    }
  };

  Comment_Schema.prototype.remove_comment_by_id = function(id, category) {
    var cur_model;
    cur_model = Mongoose.model("comments", this.comm_schema, category);
    return cur_model.remove({
      _id: id
    }, function(err) {
      if (err != null) {
        return logger.info("failed to remove_shop_by_id: " + err);
      }
    });
  };

  return Comment_Schema;

})();

module.exports = Comment_Schema;
